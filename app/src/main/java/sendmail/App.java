/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sendmail;

import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Collections;
import java.util.Properties;
import java.util.concurrent.CompletableFuture;

import com.azure.identity.ClientSecretCredential;
import com.azure.identity.ClientSecretCredentialBuilder;
import com.microsoft.aad.msal4j.ClientCredentialFactory;
import com.microsoft.aad.msal4j.ClientCredentialParameters;
import com.microsoft.aad.msal4j.ConfidentialClientApplication;
import com.microsoft.aad.msal4j.IAuthenticationResult;
import com.microsoft.graph.authentication.TokenCredentialAuthProvider;
import com.microsoft.graph.models.BodyType;
import com.microsoft.graph.models.Message;
import com.microsoft.graph.models.UserSendMailParameterSet;
import com.microsoft.graph.requests.GraphServiceClient;
import com.microsoft.graph.requests.UserRequestBuilder;
import com.microsoft.graph.requests.UserSendMailRequestBuilder;

public class App {

	/**
	 * Entry point to send mail
	 */
	public static void main(String[] args) throws Exception {

		Properties prop = null;

		try (InputStream input = App.class.getClassLoader().getResourceAsStream("app.properties");) {

			prop = new Properties();
			prop.load(input);

		} catch (IOException ex) {
			ex.printStackTrace();
		}

		String clientId = prop.getProperty("clientId");
		String clientSecret = prop.getProperty("clientSecret");
		String tenantId = prop.getProperty("tenantId");
		String tenantName = "https://login.microsoftonline.com/" + tenantId + "/";
		String recipientAddr = "geoff.ritchey@lcu.edu";
		String senderAddress = "OperatorChapel@lcu.edu";
		String operator_chapel_user_id = prop.getProperty("operatorChapelUserId");

		ConfidentialClientApplication app = ConfidentialClientApplication
				.builder(clientId, ClientCredentialFactory.createFromSecret(clientSecret)).authority(tenantName)
				.build();

		String token = getAccessTokenByClientCredentialGrant(app).accessToken();
		System.out.println("token = " + token);

		final ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder().clientId(clientId)
				.clientSecret(clientSecret).tenantId(tenantId).build();

		final TokenCredentialAuthProvider tokenCredentialAuthProvider = new TokenCredentialAuthProvider(
				Arrays.asList("https://graph.microsoft.com/.default"), clientSecretCredential);

		Message message = buildMessage();
		System.err.println("message: " + Stringify(message));

		GraphServiceClient graphClient = GraphServiceClient.builder() //
				.authenticationProvider(tokenCredentialAuthProvider) //
				.buildClient();
		UserRequestBuilder request = graphClient.users(operator_chapel_user_id);
		

		UserSendMailRequestBuilder b = request //
				.sendMail(UserSendMailParameterSet //
						.newBuilder() //
						.withMessage(message) //
						.withSaveToSentItems(true) //
						.build());
		b.buildRequest().post();
		
		
	    
	}

	/**
	 * Print out key fields of the Message
	 */
	private static String Stringify(Message message) {
		return String.join(",  ", message.body.content, message.ccRecipients.get(0).emailAddress.address,
				message.toRecipients.get(0).emailAddress.address);
	}

	/**
	 * get a temporary access token used for permission to access the Graph
	 * interface
	 */
	private static IAuthenticationResult getAccessTokenByClientCredentialGrant(ConfidentialClientApplication app)
			throws Exception {
		String scope = "https://graph.microsoft.com/.default";
		// With client credentials flows the scope is ALWAYS of the shape
		// "resource/.default", as the
		// application permissions need to be set statically (in the portal), and then
		// granted by a tenant administrator
		ClientCredentialParameters clientCredentialParam = ClientCredentialParameters
				.builder(Collections.singleton(scope)).build();

		CompletableFuture<IAuthenticationResult> future = app.acquireToken(clientCredentialParam);
		return future.get();
	}

	/**
	 * create a dummy mail message for testing
	 */
	static Message buildMessage() {
		Message message = new MessageBuilder()
				.subject("Meet for lunch")  //
				.item(new MessageBuilder  //
						.ItemBuilder()  //
						.contentType(BodyType.TEXT)
						.content("The new cafe is open")  //
						.build())
				.addRecipient("geoff.ritchey@lcu.edu")  //
				.addCc("geoff.ritchey@lcu.edu")   //
				.build();
		
		return message;
	}

}
